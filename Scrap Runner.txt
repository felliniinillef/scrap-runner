Документация проекта Scrap Runner
Ниже представлена документация проекта Scrap Runner, которую вы можете обновить. Она включает описание архитектуры, список библиотек, структуру файлов и информацию о новых элементах, таких как генерация названий для модулей, ресурсов и улучшений базы. Документация оформлена в виде markdown для удобства чтения и редактирования.


Описание проекта
Scrap Runner — это браузерная игра, разработанная на JavaScript с использованием фреймворка Phaser. Игра представляет собой платформер в постапокалиптическом мире с элементами киберпанка. Игрок управляет роботом-утилизатором, собирает ресурсы, улучшает базу и исследует процедурно генерируемый мир.

Архитектура проекта построена на модульном принципе, что обеспечивает гибкость, удобство разработки и легкость поддержки кода. Каждый модуль отвечает за свою функциональность и взаимодействует с другими через чётко определённые интерфейсы.


Архитектура проекта
Основные модули
Game Core (Ядро игры)
Центральный модуль, управляющий игровым циклом и координирующий работу остальных модулей.

Инициализация Phaser и запуск сцен (главное меню, игра, терминал).
Обработка ввода (клавиатура, сенсорные устройства).
Сохранение и загрузка прогресса.

Player (Игрок)
Управление роботом-утилизатором.

Движение (бег, прыжки).
Сбор ресурсов и взаимодействие с объектами.
Улучшение характеристик (скорость, броня, оружие).

Terminal (Терминал)
База игрока, эволюционирующая от простого фургона до технологичного комплекса.

Переработка ресурсов.
Создание модулей и улучшений.
Хранение запасов.

World (Мир)
Процедурно генерируемый мир с разнообразными локациями.

Генерация уровней (сборочные зоны, боевые участки).
Размещение NPC, врагов и объектов.
Управление случайными событиями.

NPC (Неигровые персонажи)
Управление поведением NPC.

Торговля и диалоги.
Враждебные и дружественные взаимодействия.
Работа с репутацией игрока.

Resources (Ресурсы)
Управление экономикой игры.

Сбор и классификация ресурсов (от мусора до редких материалов).
Управление энергией робота и базы.

UI (Интерфейс)
Минималистичный неоновый интерфейс.

Отображение состояния игрока (здоровье, энергия, ресурсы).
Инвентарь и меню улучшений.
Карта и диалоги.

Map (Карта)
Управление структурой мира.

Генерация процедурной карты.
Отображение положения игрока и сигналов базы.

Audio (Звук)
Создание атмосферы через аудио.

Управление звуковыми эффектами (шаги, удары).
Фоновая музыка в стиле киберпанк.

Graphics (Графика)
Визуальная составляющая игры.

Рендеринг 2.5D сцен с неоновым стилем.
Анимации и эффекты (дождь, свет).
Взаимодействие модулей
Game Core связывает все модули и управляет их запуском.
Player взаимодействует с World, NPC, Resources и Terminal.
Terminal использует Resources для крафта и переработки.
World генерирует локации и управляет NPC.
UI собирает данные от всех модулей для отображения.
Map передаёт информацию Player и UI.
Audio и Graphics реагируют на события для создания атмосферы.


Список библиотек
Phaser — рендеринг, физика и управление сценами.
Howler.js — управление звуком.
Rot.js — процедурная генерация (опционально).
Keydrown — обработка ввода с клавиатуры.
Hammer.js — поддержка сенсорных устройств.
SimplexNoise — генерация плавных переходов для карты.


Структура файлов
ScrapRunner/
│
├── index.html          # Точка входа в игру
├── game.js             # Инициализация Phaser и запуск
├── scenes/             # Сцены игры
│   ├── MainMenuScene.js   # Главное меню
│   ├── GameScene.js       # Основной игровой процесс
│   ├── TerminalScene.js   # Сцена терминала
│   ├── InventoryScene.js  # Инвентарь
│   └── MapScene.js        # Карта
├── modules/            # Основные модули
│   ├── GameCore.js     # Ядро игры
│   ├── Player.js       # Игрок
│   ├── Terminal.js     # Терминал
│   ├── World.js        # Мир
│   ├── NPC.js          # NPC
│   ├── Resources.js    # Ресурсы
│   ├── UI.js           # Интерфейс
│   ├── Map.js          # Карта
│   ├── Audio.js        # Звук
│   └── Graphics.js     # Графика
├── assets/             # Ресурсы
│   ├── images/         # Спрайты и текстуры
│   ├── audio/          # Звуки и музыка
│   └── fonts/          # Шрифты
├── utils/              # Утилиты
│   ├── InputManager.js # Обработка ввода
│   ├── SaveManager.js  # Сохранение данных
│   ├── MapGenerator.js # Генерация карты
│   └── NameGenerator.js  # Генерация названий
└── lib/                # Внешние библиотеки
    ├── phaser.min.js
    ├── howler.min.js
    ├── rot.min.js
    ├── keydrown.min.js
    ├── hammer.min.js
    └── simplex-noise.min.js


Генерация названий
Добавлена система генерации названий для модулей, ресурсов и улучшений базы, чтобы усилить атмосферу игры.
1. Модули робота
Назначение: Улучшения характеристик робота (скорость, броня, энергия).
Примеры:
"Сырой Щит Пыли" (начальный уровень).
"Плазменный Барьер Пульса" (высокий уровень).
2. Уровни ресурсов
Назначение: Материалы для крафта.
Примеры:
Уровень 1: "Мусор".
Уровень 5: "Полимер".
Уровень 8: "Хаотический эфир".
3. Модули базы
Назначение: Улучшения терминала (защита, переработка).
Примеры:
Защита: "Ржавая баррикада" → "Эфирная крепость".
Переработка: "Мусорный пресс" → "Квантовый переработчик".
Подход к генерации
Структура: Префикс + Основа + Суффикс (+ индекс).
Прогрессия: От "грязных" названий (ржавчина, пыль) к технологичным (плазма, эфир).
Темы: Постапокалипсис, киберпанк, эволюция технологий.


Реализация в коде
NameGenerator.js (в utils/):

Содержит списки префиксов, основ и суффиксов.
Функции:
generateModuleName(level, type) — для модулей робота.
generateResourceName(level) — для ресурсов.
generateBaseModuleName(level, category) — для базы.

UI.js (в modules/):

Отображение названий в инвентаре, меню улучшений и интерфейсе терминала.


Заключение
Scrap Runner сочетает модульную архитектуру, процедурную генерацию и атмосферу киберпанка. Использование Phaser и дополнительных библиотек позволяет реализовать гибкий и расширяемый проект. Структура файлов и система генерации названий упрощают разработку и усиливают погружение в игру. Вы можете обновить эту документацию, добавив новые модули, библиотеки или функции по мере развития проекта.
